"""Benchmarks for NATS client publish operations - measuring throughput."""

import pytest
from nats.client import connect
from nats.server import run


@pytest.mark.asyncio
@pytest.mark.parametrize("count,payload_size", [
    # 1k messages with power-of-2 payload sizes
    (1000, 0),
    (1000, 32),
    (1000, 64),
    (1000, 128),
    (1000, 256),
    (1000, 512),
    (1000, 1024),
    (1000, 2048),
    (1000, 4096),
    (1000, 8192),
    (1000, 16384),
    (1000, 32768),
    (1000, 65536),
    # 10k messages with power-of-2 payload sizes
    (10000, 0),
    (10000, 32),
    (10000, 64),
    (10000, 128),
    (10000, 256),
    (10000, 512),
    (10000, 1024),
    (10000, 2048),
    (10000, 4096),
    (10000, 8192),
    (10000, 16384),
    (10000, 32768),
    (10000, 65536),
    # 100k messages with power-of-2 payload sizes
    (100000, 0),
    (100000, 32),
    (100000, 64),
    (100000, 128),
    (100000, 256),
    (100000, 512),
    (100000, 1024),
    (100000, 2048),
    (100000, 4096),
    (100000, 8192),
    (100000, 16384),
    (100000, 32768),
    (100000, 65536),
    # 1M messages with power-of-2 payload sizes
    (1000000, 0),
    (1000000, 32),
    (1000000, 64),
    (1000000, 128),
    (1000000, 256),
    (1000000, 512),
    (1000000, 1024),
    (1000000, 2048),
    (1000000, 4096),
    (1000000, 8192),
    (1000000, 16384),
    (1000000, 32768),
    (1000000, 65536),
])
async def bench_publish_throughput(benchmark, count, payload_size):
    """Benchmark publishing messages - throughput test."""
    server = await run(port=0)
    client = await connect(server.client_url, timeout=1.0)
    payload = b"x" * payload_size

    try:
        async def run_publish():
            for _ in range(count):
                await client.publish("test.subject", payload)
            await client.flush(timeout=120.0)

        await benchmark(run_publish)
    finally:
        await client.close()
        await server.shutdown()


@pytest.mark.asyncio
@pytest.mark.parametrize("count,payload_size,header_count", [
    # 1k messages
    (1000, 0, 1),
    (1000, 0, 2),
    (1000, 0, 4),
    (1000, 0, 8),
    (1000, 32, 1),
    (1000, 32, 2),
    (1000, 32, 4),
    (1000, 32, 8),
    (1000, 64, 1),
    (1000, 64, 2),
    (1000, 64, 4),
    (1000, 64, 8),
    (1000, 128, 1),
    (1000, 128, 2),
    (1000, 128, 4),
    (1000, 128, 8),
    (1000, 256, 1),
    (1000, 256, 2),
    (1000, 256, 4),
    (1000, 256, 8),
    (1000, 512, 1),
    (1000, 512, 2),
    (1000, 512, 4),
    (1000, 512, 8),
    (1000, 1024, 1),
    (1000, 1024, 2),
    (1000, 1024, 4),
    (1000, 1024, 8),
    (1000, 2048, 1),
    (1000, 2048, 2),
    (1000, 2048, 4),
    (1000, 2048, 8),
    (1000, 4096, 1),
    (1000, 4096, 2),
    (1000, 4096, 4),
    (1000, 4096, 8),
    (1000, 8192, 1),
    (1000, 8192, 2),
    (1000, 8192, 4),
    (1000, 8192, 8),
    (1000, 16384, 1),
    (1000, 16384, 2),
    (1000, 16384, 4),
    (1000, 16384, 8),
    (1000, 32768, 1),
    (1000, 32768, 2),
    (1000, 32768, 4),
    (1000, 32768, 8),
    (1000, 65536, 1),
    (1000, 65536, 2),
    (1000, 65536, 4),
    (1000, 65536, 8),
    # 10k messages
    (10000, 0, 1),
    (10000, 0, 2),
    (10000, 0, 4),
    (10000, 0, 8),
    (10000, 32, 1),
    (10000, 32, 2),
    (10000, 32, 4),
    (10000, 32, 8),
    (10000, 64, 1),
    (10000, 64, 2),
    (10000, 64, 4),
    (10000, 64, 8),
    (10000, 128, 1),
    (10000, 128, 2),
    (10000, 128, 4),
    (10000, 128, 8),
    (10000, 256, 1),
    (10000, 256, 2),
    (10000, 256, 4),
    (10000, 256, 8),
    (10000, 512, 1),
    (10000, 512, 2),
    (10000, 512, 4),
    (10000, 512, 8),
    (10000, 1024, 1),
    (10000, 1024, 2),
    (10000, 1024, 4),
    (10000, 1024, 8),
    (10000, 2048, 1),
    (10000, 2048, 2),
    (10000, 2048, 4),
    (10000, 2048, 8),
    (10000, 4096, 1),
    (10000, 4096, 2),
    (10000, 4096, 4),
    (10000, 4096, 8),
    (10000, 8192, 1),
    (10000, 8192, 2),
    (10000, 8192, 4),
    (10000, 8192, 8),
    (10000, 16384, 1),
    (10000, 16384, 2),
    (10000, 16384, 4),
    (10000, 16384, 8),
    (10000, 32768, 1),
    (10000, 32768, 2),
    (10000, 32768, 4),
    (10000, 32768, 8),
    (10000, 65536, 1),
    (10000, 65536, 2),
    (10000, 65536, 4),
    (10000, 65536, 8),
    # 100k messages
    (100000, 0, 1),
    (100000, 0, 2),
    (100000, 0, 4),
    (100000, 0, 8),
    (100000, 32, 1),
    (100000, 32, 2),
    (100000, 32, 4),
    (100000, 32, 8),
    (100000, 64, 1),
    (100000, 64, 2),
    (100000, 64, 4),
    (100000, 64, 8),
    (100000, 128, 1),
    (100000, 128, 2),
    (100000, 128, 4),
    (100000, 128, 8),
    (100000, 256, 1),
    (100000, 256, 2),
    (100000, 256, 4),
    (100000, 256, 8),
    (100000, 512, 1),
    (100000, 512, 2),
    (100000, 512, 4),
    (100000, 512, 8),
    (100000, 1024, 1),
    (100000, 1024, 2),
    (100000, 1024, 4),
    (100000, 1024, 8),
    (100000, 2048, 1),
    (100000, 2048, 2),
    (100000, 2048, 4),
    (100000, 2048, 8),
    (100000, 4096, 1),
    (100000, 4096, 2),
    (100000, 4096, 4),
    (100000, 4096, 8),
    (100000, 8192, 1),
    (100000, 8192, 2),
    (100000, 8192, 4),
    (100000, 8192, 8),
    (100000, 16384, 1),
    (100000, 16384, 2),
    (100000, 16384, 4),
    (100000, 16384, 8),
    (100000, 32768, 1),
    (100000, 32768, 2),
    (100000, 32768, 4),
    (100000, 32768, 8),
    (100000, 65536, 1),
    (100000, 65536, 2),
    (100000, 65536, 4),
    (100000, 65536, 8),
    # 1M messages
    (1000000, 0, 1),
    (1000000, 0, 2),
    (1000000, 0, 4),
    (1000000, 0, 8),
    (1000000, 32, 1),
    (1000000, 32, 2),
    (1000000, 32, 4),
    (1000000, 32, 8),
    (1000000, 64, 1),
    (1000000, 64, 2),
    (1000000, 64, 4),
    (1000000, 64, 8),
    (1000000, 128, 1),
    (1000000, 128, 2),
    (1000000, 128, 4),
    (1000000, 128, 8),
    (1000000, 256, 1),
    (1000000, 256, 2),
    (1000000, 256, 4),
    (1000000, 256, 8),
    (1000000, 512, 1),
    (1000000, 512, 2),
    (1000000, 512, 4),
    (1000000, 512, 8),
    (1000000, 1024, 1),
    (1000000, 1024, 2),
    (1000000, 1024, 4),
    (1000000, 1024, 8),
    (1000000, 2048, 1),
    (1000000, 2048, 2),
    (1000000, 2048, 4),
    (1000000, 2048, 8),
    (1000000, 4096, 1),
    (1000000, 4096, 2),
    (1000000, 4096, 4),
    (1000000, 4096, 8),
    (1000000, 8192, 1),
    (1000000, 8192, 2),
    (1000000, 8192, 4),
    (1000000, 8192, 8),
    (1000000, 16384, 1),
    (1000000, 16384, 2),
    (1000000, 16384, 4),
    (1000000, 16384, 8),
    (1000000, 32768, 1),
    (1000000, 32768, 2),
    (1000000, 32768, 4),
    (1000000, 32768, 8),
    (1000000, 65536, 1),
    (1000000, 65536, 2),
    (1000000, 65536, 4),
    (1000000, 65536, 8),
])
async def bench_publish_throughput_with_headers(benchmark, count, payload_size, header_count):
    """Benchmark publishing messages with headers - throughput test."""
    server = await run(port=0)
    client = await connect(server.client_url, timeout=1.0)
    payload = b"x" * payload_size
    headers = {f"X-Header-{i}": f"value{i}" for i in range(header_count)}

    try:
        async def run_publish():
            for _ in range(count):
                await client.publish("test.subject", payload, headers=headers)
            await client.flush(timeout=120.0)

        await benchmark(run_publish)
    finally:
        await client.close()
        await server.shutdown()
